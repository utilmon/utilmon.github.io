<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://utilmon.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://utilmon.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-09T02:02:59+00:00</updated><id>https://utilmon.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">a post with plotly.js</title><link href="https://utilmon.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://utilmon.github.io/blog/2025/plotly</id><content type="html" xml:base="https://utilmon.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://utilmon.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://utilmon.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Cannes 2024 poster</title><link href="https://utilmon.github.io/blog/2024/cannes-2024/" rel="alternate" type="text/html" title="Cannes 2024 poster"/><published>2024-05-20T16:40:16+00:00</published><updated>2024-05-20T16:40:16+00:00</updated><id>https://utilmon.github.io/blog/2024/cannes-2024</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/cannes-2024/"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cannes2024-480.webp 480w,/assets/img/cannes2024-800.webp 800w,/assets/img/cannes2024-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/cannes2024.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><a href="https://en.wikipedia.org/wiki/2024_Cannes_Film_Festival">2024 Cannes Film Festival</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="arts"/><summary type="html"><![CDATA[Cannes 2024 poster]]></summary></entry><entry><title type="html">Portfolio Optimization with QC</title><link href="https://utilmon.github.io/blog/2024/portfolio-optimization/" rel="alternate" type="text/html" title="Portfolio Optimization with QC"/><published>2024-05-15T15:09:00+00:00</published><updated>2024-05-15T15:09:00+00:00</updated><id>https://utilmon.github.io/blog/2024/portfolio-optimization</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/portfolio-optimization/"><![CDATA[<h1 id="optimizing-your-portfolio-with-quantum-computers">Optimizing your portfolio with quantum computers</h1> <h2 id="introduction-what-is-portfolio-optimization">Introduction: What is portfolio optimization?</h2> <p>Portfolio optimization is a crucial process for anyone who wants to maximize returns from their investments. Investments are usually a collection of so-called assets (stock, credits, bonds, derivatives, calls, puts, etc..) and this collection of assets is called a <strong>portfolio</strong>.</p> <p>The goal of portfolio optimization is to minimize risks (financial loss) and maximize returns (financial gain). But this process is not as simple as it may seem. Gaining high returns with little risk is indeed too good to be true. Risks and returns usually have a trade-off relationship which makes optmizing your portfolio a little more complicated. As Dr. Harry Markowitz states in his Modern Portfolio Theory he created in 1952, “risk is an inherrent part of higher reward.”</p> <p><strong>Modern Portfolio Theory (MPT)</strong> <br/> An investment theory based on the idea that investors are risk-averse, meaning that when given two portfolios that offer the same expected return they will prefer the less risky one. Investors can construct portfolios to maximize expected return based on a given level of market risk, emphasizing that risk is an inherent part of higher reward. It is one of the most important and influential economic theories dealing with finance and investment. Dr. Harry Markowitz created the modern portfolio theory (MPT) in 1952 and won the Nobel Prize in Economic Sciences in 1990 for it. <br/><br/> <strong>Reference:</strong> <a href="https://en.wikipedia.org/wiki/Modern_portfolio_theory">Modern Portfolio Theory</a></p> <h2 id="1-finding-the-efficient-frontier">1. Finding the efficient frontier</h2> <p>The Modern portfolio theory (MPT) serves as a general framework to determine an ideal portfolio for investors. The MPT is also referred to as mean-variance portfolio theory because it assumes that any investor will choose the optimal portfolio from the set of portfolios that</p> <ul> <li>Maximizes expected return for a given level of risk; and</li> <li>Minimizes risks for a given level of expected returns.</li> </ul> <p>Consider a situation where you have two stocks to choose from: A and B. You can invest your entire wealth in one of these two stocks. Or you can invest 10% in A and 90% in B, or 20% in A and 80% in B, or 70% in A and 30% in B, etc … There is a huge number of possible combinations and this is a simple case when considering two stocks. Imagine the different combinations you have to consider when you have thousands of stocks.</p> <p>The minimum variance frontier shows the minimum variance that can be achieved for a given level of expected return. To construct a minimum-variance frontier of a portfolio:</p> <ul> <li>Use historical data to estimate the mean, variance of each individual stock in the portfolio, and the correlation of each pair of stocks.</li> <li>Use a computer program to find out the weights of all stocks that minimize the portfolio variance for each pre-specified expected return.</li> <li>Calculate the expected returns and variances for all the minimum variance portfolios determined in step 2 and then graph the two variables.</li> </ul> <p>Investors will never want to hold a portfolio below the minimum variance point. They will always get higher returns along the positively sloped part of the minimum-variance frontier. And the positively sloped part of the minimum-variance frontier is called the <strong>efficient frontier</strong>.</p> <p>The <strong>efficient frontier</strong> is where the optimal portfolios are. And it helps narrow down the different portfolios from which the investor may choose.</p> <h2 id="2-goal-of-our-exercise">2. Goal Of Our Exercise</h2> <p>The goal of this exercise is to find the efficent frontier for an inherent risk using a quantum approach. We will use Qiskit’s Finance application modules to convert our portfolio optimization problem into a quadratic program so we can then use variational quantum algorithms such as VQE and QAOA to solve our optimization problem. Let’s first start by looking at the actual problem we have at hand.</p> <h2 id="3-four-stock-portfolio-optimization-problem">3. Four-Stock Portfolio Optimization Problem</h2> <p>Let us consider a portfolio optimization problem where you have a total of four assets (e.g. STOCK0, STOCK1, STOCK2, STOCK3) to choose from. Your goal is to find out a combination of two assets that will minimize the tradeoff between risk and return which is the same as finding the efficient frontier for the given risk.</p> <h2 id="4-formulation">4. Formulation</h2> <p>How can we formulate this problem?<br/> The function which describes the efficient frontier can be formulated into a quadratic program with linear constraints as shown below. <br/> The terms that are marked in red are associated with risks and the terms in blue are associated with returns. You can see that our goal is to minimize the tradeoff between risk and return. In general, the function we want to optimize is called an objective function. <br/> <br/></p> \[\min_{x \in \{0, 1\}^n}: q x^n\Sigma x - \mu ^n x\] \[subject \ to: 1^n x = B\] <ul> <li> <font size="4em">x</font> <p>indicates asset allocation.</p> </li> <li> <font size="4em">Σ</font> <p>(sigma) is a covariance matrix. A covariance matrix is a useful math concept that is widely applied in financial engineering. It is a statistical measure of how two asset prices are varying with respect to each other. When the covariance between two stocks is high, it means that one stock experiences heavy price movements and is volatile if the price of the other stock changes.</p> </li> <li> <font size="4em">q</font> <p>is called a risk factor (risk tolerance), which is an evaluation of an individual’s willingness or ability to take risks. For example, when you use the automated financial advising services, the so-called robo-advising, you will usually see different risk tolerance levels. This q value is the same as such and takes a value between 0 and 1.</p> </li> <li> <font size="4em">𝝁</font> <p>(mu) is the expected return and is something we obviously want to maximize.</p> </li> <li> <font size="4em">n</font> <p>is the number of different assets we can choose from</p> </li> <li> <font size="4em">B</font> <p>stands for Budget. And budget in this context means the number of assets we can allocate in our portfolio.</p> </li> </ul> <h4 id="goal">Goal:</h4> <p>Our goal is to find the <strong>x</strong> value. The x value here indicates which asset to pick (𝑥[𝑖]=1) and which not to pick (𝑥[𝑖]=0).</p> <h4 id="assumptions">Assumptions:</h4> <p>We assume the following simplifications:</p> <ul> <li>all assets have the same price (normalized to 1),</li> <li>the full budget \(B\) has to be spent, i.e. one has to select exactly \(B\) assets.</li> <li>the equality constraint \(1^n x = B\) is mapped to a penalty term \((1^n x - B)^2\) which is scaled by a parameter and subtracted from the objective function.</li> </ul> <h2 id="step-1-import-necessary-libraries">Step 1. Import necessary libraries</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Let us begin by importing necessary libraries.
</span><span class="kn">from</span> <span class="n">qiskit</span> <span class="kn">import</span> <span class="n">Aer</span>
<span class="kn">from</span> <span class="n">qiskit.algorithms</span> <span class="kn">import</span> <span class="n">VQE</span><span class="p">,</span> <span class="n">QAOA</span><span class="p">,</span> <span class="n">NumPyMinimumEigensolver</span>
<span class="kn">from</span> <span class="n">qiskit.algorithms.optimizers</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">qiskit.circuit.library</span> <span class="kn">import</span> <span class="n">TwoLocal</span>
<span class="kn">from</span> <span class="n">qiskit.utils</span> <span class="kn">import</span> <span class="n">QuantumInstance</span>
<span class="kn">from</span> <span class="n">qiskit.utils</span> <span class="kn">import</span> <span class="n">algorithm_globals</span>
<span class="kn">from</span> <span class="n">qiskit_finance</span> <span class="kn">import</span> <span class="n">QiskitFinanceError</span>
<span class="kn">from</span> <span class="n">qiskit_finance.applications.optimization</span> <span class="kn">import</span> <span class="n">PortfolioOptimization</span>
<span class="kn">from</span> <span class="n">qiskit_finance.data_providers</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">qiskit_optimization.algorithms</span> <span class="kn">import</span> <span class="n">MinimumEigenOptimizer</span>
<span class="kn">from</span> <span class="n">qiskit_optimization.applications</span> <span class="kn">import</span> <span class="n">OptimizationApplication</span>
<span class="kn">from</span> <span class="n">qiskit_optimization.converters</span> <span class="kn">import</span> <span class="n">QuadraticProgramToQubo</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">warnings</span>
<span class="kn">from</span> <span class="n">sympy.utilities.exceptions</span> <span class="kn">import</span> <span class="n">SymPyDeprecationWarning</span>
<span class="n">warnings</span><span class="p">.</span><span class="nf">simplefilter</span><span class="p">(</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">,</span> <span class="n">SymPyDeprecationWarning</span><span class="p">)</span>
</code></pre></div></div> <h2 id="step-2-generate-time-series-data-financial-data">Step 2. Generate time series data (Financial Data)</h2> <p>Let’s first generate a random time series financial data for a total number of stocks n=4. We use RandomDataProvider for this. We are going back in time and retrieve financial data from November 5, 1955 to October 26, 1985.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set parameters for assets and risk factor
</span><span class="n">num_assets</span> <span class="o">=</span> <span class="mi">4</span>     <span class="c1"># set number of assets to 4
</span><span class="n">q</span> <span class="o">=</span> <span class="mf">0.5</span>                   <span class="c1"># set risk factor to 0.5
</span><span class="n">budget</span> <span class="o">=</span> <span class="mi">2</span>           <span class="c1"># set budget as defined in the problem
</span><span class="n">seed</span> <span class="o">=</span> <span class="mi">132</span>     <span class="c1">#set random seed
</span>
<span class="c1"># Generate time series data
</span><span class="n">stocks</span> <span class="o">=</span> <span class="p">[(</span><span class="sh">"</span><span class="s">STOCK%s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_assets</span><span class="p">)]</span>
<span class="n">data</span> <span class="o">=</span> <span class="nc">RandomDataProvider</span><span class="p">(</span><span class="n">tickers</span><span class="o">=</span><span class="n">stocks</span><span class="p">,</span>
                 <span class="n">start</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="nf">datetime</span><span class="p">(</span><span class="mi">1955</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span>
                 <span class="n">end</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="nf">datetime</span><span class="p">(</span><span class="mi">1985</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">26</span><span class="p">),</span>
                 <span class="n">seed</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's plot our finanical data
</span><span class="nf">for </span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">_tickers</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">_data</span><span class="p">[</span><span class="n">cnt</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="n">s</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">days</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">stock value</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <h2 id="step-3-quadratic-program-formulation">Step 3. Quadratic Program Formulation</h2> <p>Let’s generate the expected return first and then the covariance matrix which are both needed to create our portfolio.</p> <h3 id="expected-return-μ">Expected Return μ</h3> <p>Expected return of a portfolio is the anticipated amount of returns that a portfolio may generate, making it the mean (average) of the portfolio’s possible return distribution. For example, let’s say stock A, B and C each weighted 50%, 20% and 30% respectively in the portfolio. If the expected return for each stock was 15%, 6% and 9% respectively, the expected return of the portfolio would be:</p> <div align="center"> μ = (50% x 15%) + (20% x 6%) + (30% x 9%) = 11.4% </div> <p>For the problem data we generated earlier, we can calculate the expected return over the 30 years period from 1955 to 1985 by using the following <code class="language-plaintext highlighter-rouge">get_period_return_mean_vector()</code> method which is provided by Qiskit’s RandomDataProvider.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Let's calculate the expected return for our problem data
</span>
<span class="n">mu</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get_period_return_mean_vector</span><span class="p">()</span>   <span class="c1"># Returns a vector containing the mean value of each asset's expected return.
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">mu</span><span class="p">)</span>
</code></pre></div></div> <h3 id="covariance-matrix-σ">Covariance Matrix Σ</h3> <p>Covariance Σ is a statistical measure of how two asset’s mean returns vary with respect to each other and helps us understand the amount of risk involved from an investment portfolio’s perspective to make an informed decision about buying or selling stocks.</p> <p>If you have ‘n’ stocks in your porfolio, the size of the covariance matrix will be n x n. Let us plot the covariance marix for our 4 stock portfolio which will be a 4 x 4 matrix.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's plot our covariance matrix Σ（sigma）
</span><span class="n">sigma</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get_period_return_covariance_matrix</span><span class="p">()</span> <span class="c1">#Returns the covariance matrix of the four assets
</span><span class="nf">print</span><span class="p">(</span><span class="n">sigma</span><span class="p">)</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">sigma</span><span class="p">,</span> <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">x_label_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">stock3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">stock2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">stock1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">stock0</span><span class="sh">'</span><span class="p">]</span>
<span class="n">y_label_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">stock3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">stock2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">stock1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">stock0</span><span class="sh">'</span><span class="p">]</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">([</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.25</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="mf">0.75</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_yticks</span><span class="p">([</span><span class="mf">0.75</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="o">-</span><span class="mf">0.25</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">x_label_list</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_yticklabels</span><span class="p">(</span><span class="n">y_label_list</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">clim</span><span class="p">(</span><span class="o">-</span><span class="mf">0.000002</span><span class="p">,</span> <span class="mf">0.00001</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>The left-to-right diagnoal values (yellow boxes in the figure below) show the relation of a stock with ‘itself’. And the off-diagonal values show the deviation of each stock’s mean expected return with respect to each other. A simple way to look at a covariance matrix is:</p> <ul> <li>If two stocks increase and decrease simultaneously then the covariance value will be positive.</li> <li>If one increases while the other decreases then the covariance will be negative.</li> </ul> <p>You may have heard the phrase “Don’t Put All Your Eggs in One Basket.” If you invest in things that always move in the same direction, there will be a risk of losing all your money at the same time. Covariance matrix is a nice measure to help investors diversify their assets to reduce such risk.</p> <p>Now that we have all the values we need to build our portfolio for optimization, we will look into Qiskit’s Finance application class that will help us contruct the quadratic program for our problem.</p> <h2 id="qiskit-finance-application-class">Qiskit Finance application class</h2> <p>In Qiskit, there is a dedicated <a href="https://qiskit.org/documentation/finance/stubs/qiskit_finance.applications.PortfolioOptimization.html#qiskit_finance.applications.PortfolioOptimization"><code class="language-plaintext highlighter-rouge">PortfolioOptimization</code></a> application to construct the quadratic program for portfolio optimizations.</p> <p>PortfolioOptimization class creates a porfolio instance by taking the following <strong>five arguments</strong> then converts the instance into a quadratic program.</p> <p>Arguments of the PortfolioOptimization class:</p> <ul> <li>expected_returns</li> <li>covariances</li> <li>risk_factor</li> <li>budget</li> <li>bounds</li> </ul> <p>Once our portfolio instance is converted into a quadratic program, then we can use quantum variational algorithms suchs as Variational Quantum Eigensolver (VQE) or the Quantum Approximate Optimization Algorithm (QAOA) to find the optimal solution to our problem.<br/></p> <p>We already obtained expected_return and covariances from Step 3 and have risk factor and budget pre-defined. So, let’s build our portfolio using the <a href="https://qiskit.org/documentation/finance/stubs/qiskit_finance.applications.PortfolioOptimization.html#qiskit_finance.applications.PortfolioOptimization"><code class="language-plaintext highlighter-rouge">PortfolioOptimization</code></a> class.</p> <h2 id="step-3-create-the-portfolio-instance-using-portfoliooptimization-class">Step 3: Create the portfolio instance using PortfolioOptimization class</h2> <p>To generate the portfolio instance using the PortfolioOptimization class, we simply pass in the five arguments and their values obtained in the previous steps:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">portfolio</span> <span class="o">=</span> <span class="nc">PortfolioOptimization</span><span class="p">(</span>
    <span class="n">expected_returns</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span>
    <span class="n">covariances</span><span class="o">=</span><span class="n">sigma</span><span class="p">,</span>
    <span class="n">risk_factor</span><span class="o">=</span><span class="n">q</span><span class="p">,</span>
    <span class="n">budget</span><span class="o">=</span><span class="n">budget</span><span class="p">,</span>
    <span class="n">bounds</span><span class="o">=</span><span class="bp">None</span>
<span class="p">)</span>
<span class="n">qp</span> <span class="o">=</span> <span class="n">portfolio</span><span class="p">.</span><span class="nf">to_quadratic_program</span><span class="p">()</span>
</code></pre></div></div> <p>This converts the portfolio instance into a quadratic program <code class="language-plaintext highlighter-rouge">qp</code> that we can then solve using variational quantum algorithms.</p> <h2 id="step-5-solve-with-classical-optimizer-as-a-reference">Step 5. Solve with classical optimizer as a reference</h2> <p>Lets solve the problem. First classically…</p> <p>We can now use the Operator we built above without regard to the specifics of how it was created. We set the algorithm for the NumPyMinimumEigensolver so we can have a classical reference. Backend is not required since this is computed classically not using quantum computation. The result is returned as a dictionary.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">exact_mes</span> <span class="o">=</span> <span class="nc">NumPyMinimumEigensolver</span><span class="p">()</span>
<span class="n">exact_eigensolver</span> <span class="o">=</span> <span class="nc">MinimumEigenOptimizer</span><span class="p">(</span><span class="n">exact_mes</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">exact_eigensolver</span><span class="p">.</span><span class="nf">solve</span><span class="p">(</span><span class="n">qp</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div> <p>The optimal value indicates your asset allocation.</p> <h2 id="solution-using-vqe">Solution using VQE</h2> <p><strong>Variational Quantum Eigensolver (VQE)</strong> is a classical-quantum hybrid algorithm which outsources some of the processing workload to a classical computer to efficiently calculate the ground state energy (lowest energy) of a <a href="https://en.wikipedia.org/wiki/Hamiltonian_(quantum_mechanics)"><strong>Hamiltonian</strong></a>. As we discussed earlier, we can reformulate the quadratic program as a ground state energy search to be solved by <strong>VQE</strong> where the ground state corresponds to the optimal solution we are looking for.</p> <p>Here is an example implementation of VQE using the two-local circuit. The two-local circuit is a parameterized circuit consisting of alternating rotation layers and entanglement layers. The rotation layers are single qubit gates applied on all qubits. The entanglement layer uses two-qubit gates to entangle the qubits. Here, we use Ry gates (i.e. ‘ry’) for the rotational blocks and controlled-Z gates (i.e. ‘cz’) for the entanglement blocks in our parameterized circuit.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimizer</span> <span class="o">=</span> <span class="nc">SLSQP</span><span class="p">(</span><span class="n">maxiter</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
<span class="n">algorithm_globals</span><span class="p">.</span><span class="n">random_seed</span> <span class="o">=</span> <span class="mi">1234</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">Aer</span><span class="p">.</span><span class="nf">get_backend</span><span class="p">(</span><span class="sh">'</span><span class="s">statevector_simulator</span><span class="sh">'</span><span class="p">)</span>

<span class="n">ry</span> <span class="o">=</span> <span class="nc">TwoLocal</span><span class="p">(</span><span class="n">num_assets</span><span class="p">,</span> <span class="sh">'</span><span class="s">ry</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">cz</span><span class="sh">'</span><span class="p">,</span> <span class="n">reps</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">entanglement</span><span class="o">=</span><span class="sh">'</span><span class="s">full</span><span class="sh">'</span><span class="p">)</span>
<span class="n">quantum_instance</span> <span class="o">=</span> <span class="nc">QuantumInstance</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">backend</span><span class="p">,</span> <span class="n">seed_simulator</span><span class="o">=</span><span class="n">seed</span><span class="p">,</span> <span class="n">seed_transpiler</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
<span class="n">vqe</span> <span class="o">=</span> <span class="nc">VQE</span><span class="p">(</span><span class="n">ry</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">quantum_instance</span><span class="o">=</span><span class="n">quantum_instance</span><span class="p">)</span>

<span class="n">vqe_meo</span> <span class="o">=</span> <span class="nc">MinimumEigenOptimizer</span><span class="p">(</span><span class="n">vqe</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">vqe_meo</span><span class="p">.</span><span class="nf">solve</span><span class="p">(</span><span class="n">qp</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div> <p>VQE should give you the same optimal results as the reference solution.</p> <h2 id="portfolio-optimization-for-b3-n4-stocks">Portfolio optimization for B=3, n=4 stocks</h2> <p>Now let’s consider solving the same problem where one can allocate double weights (can allocate twice the amount) for a single asset. For example, if you allocate twice for STOCK3 and one for STOCK2, then your portfolio can be represented as [2, 1, 0, 0]. If you allocate a single weight for STOCK0, STOCK1, STOCK2 then your portfolio will look like [0, 1, 1, 1].</p> <p>Furthermore, let’s change the constraint to B=3. With this new constraint, find the optimal portfolio that minimizes the tradeoff between risk and return.</p> <p>There are two approaches we can take to handle the double weights:</p> <ol> <li>Use the <code class="language-plaintext highlighter-rouge">bounds</code> option in the PortfolioOptimization class to allow integer variables. By default, bounds is set to ‘None’ which means all the variables are binary. But we can set bounds=[[0,2],[0,2],[0,2],[0,2]] to allow any one of the four stocks to have double weights.</li> <li>Repeat the stocks twice in the list and concatenate the expected return and covariance data. For example, you can allocate double weights to one asset by repeating them twice like [STOCKA, STOCKB, STOCKC, STOCKD, <strong>STOCKA</strong>, <strong>STOCKB</strong>, <strong>STOCKC</strong>, <strong>STOCKD</strong>]. This way, even with only binary variables, you can still allocate double weights. You would just need to double the number of assets and concatenate mu and sigma accordingly.</li> </ol> <p>Here is the code using the first approach with the <code class="language-plaintext highlighter-rouge">bounds</code> option:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">q2</span> <span class="o">=</span> <span class="mf">0.5</span>     <span class="c1">#Set risk factor to 0.5
</span><span class="n">budget2</span> <span class="o">=</span> <span class="mi">3</span>      <span class="c1">#Set budget to 3
</span>
<span class="n">portfolio2</span> <span class="o">=</span> <span class="nc">PortfolioOptimization</span><span class="p">(</span><span class="n">expected_returns</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span> <span class="n">covariances</span><span class="o">=</span><span class="n">sigma</span><span class="p">,</span> <span class="n">risk_factor</span><span class="o">=</span><span class="n">q2</span><span class="p">,</span> <span class="n">budget</span><span class="o">=</span><span class="n">budget2</span><span class="p">,</span> <span class="n">bounds</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">]])</span>
<span class="n">qp2</span> <span class="o">=</span> <span class="n">portfolio2</span><span class="p">.</span><span class="nf">to_quadratic_program</span><span class="p">()</span>
</code></pre></div></div> <h2 id="solution-using-qaoa">Solution using QAOA</h2> <p><strong>Quantum Approximate Optimization Algorithm (QAOA)</strong> is another variational algorithm that has applications for solving combinatorial optimization problems on near-term quantum systems. This algorithm can also be used to calculate ground states of a Hamiltonian and can be easily implemented by using Qiskit’s <strong>QAOA</strong> application.</p> <p>Let’s solve the B=3 problem using QAOA:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimizer</span> <span class="o">=</span> <span class="nc">SLSQP</span><span class="p">(</span><span class="n">maxiter</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
<span class="n">algorithm_globals</span><span class="p">.</span><span class="n">random_seed</span> <span class="o">=</span> <span class="mi">1234</span>
<span class="n">backend</span> <span class="o">=</span> <span class="n">Aer</span><span class="p">.</span><span class="nf">get_backend</span><span class="p">(</span><span class="sh">'</span><span class="s">statevector_simulator</span><span class="sh">'</span><span class="p">)</span>

<span class="n">quantum_instance</span> <span class="o">=</span> <span class="nc">QuantumInstance</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">backend</span><span class="p">,</span> <span class="n">seed_simulator</span><span class="o">=</span><span class="n">seed</span><span class="p">,</span> <span class="n">seed_transpiler</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
<span class="n">qaoa</span> <span class="o">=</span> <span class="nc">QAOA</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">reps</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">quantum_instance</span><span class="o">=</span><span class="n">quantum_instance</span><span class="p">)</span>
<span class="n">meo</span> <span class="o">=</span> <span class="nc">MinimumEigenOptimizer</span><span class="p">(</span><span class="n">qaoa</span><span class="p">)</span>

<span class="n">qaoa_meo</span> <span class="o">=</span> <span class="nc">MinimumEigenOptimizer</span><span class="p">(</span><span class="n">qaoa</span><span class="p">)</span>

<span class="n">result2</span> <span class="o">=</span> <span class="n">qaoa_meo</span><span class="p">.</span><span class="nf">solve</span><span class="p">(</span><span class="n">qp2</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">result2</span><span class="p">)</span>
</code></pre></div></div> <p>The QAOA execution may take a few minutes to complete.</p> <h3 id="further-reading">Further Reading:</h3> <p>If you are interested in further reading, here are a few resources to explore: <br/></p> <ol> <li><a href="https://arxiv.org/abs/1710.01022"><strong>Quantum optimization using variational algorithms on near-term quantum devices. Moll et al. 2017</strong></a><br/></li> <li><a href="https://arxiv.org/abs/1907.04769"><strong>Improving Variational Quantum Optimization using CVaR. Barkoutsos et al. 2019.</strong></a><br/></li> </ol>]]></content><author><name></name></author><category term="Quantum-Computing"/><category term="physics"/><category term="programming"/><category term="code"/><summary type="html"><![CDATA[Portfolio Optimization walkthrough with qiskit]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://utilmon.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://utilmon.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://utilmon.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://utilmon.github.io/blog/2024/tabs</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="70041a0e-49c5-4009-8e6b-f8c0b189aef6" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="70041a0e-49c5-4009-8e6b-f8c0b189aef6" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="52193ce9-2a56-481e-bb26-bb1320b133d7" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="52193ce9-2a56-481e-bb26-bb1320b133d7" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="0780c14b-9ae2-4266-b1ca-288d96411b4f" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="0780c14b-9ae2-4266-b1ca-288d96411b4f" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://utilmon.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://utilmon.github.io/blog/2024/typograms</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://utilmon.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://utilmon.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://utilmon.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://utilmon.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">Simulating Molecules with QC</title><link href="https://utilmon.github.io/blog/2024/simulating-molecules/" rel="alternate" type="text/html" title="Simulating Molecules with QC"/><published>2024-03-12T15:09:00+00:00</published><updated>2024-03-12T15:09:00+00:00</updated><id>https://utilmon.github.io/blog/2024/simulating-molecules</id><content type="html" xml:base="https://utilmon.github.io/blog/2024/simulating-molecules/"><![CDATA[<h1 id="variational-quantum-eigensolver-for-simulating-molecules">Variational Quantum Eigensolver for Simulating Molecules</h1> <p>Quantum computing is an exciting field that has the potential to solve complex problems that are intractable for classical computers. One such problem is simulating molecules, which is crucial for drug discovery, materials science, and many other fields. In this article, we will explore the Variational Quantum Eigensolver (VQE) algorithm and how it can be used to simulate molecules using quantum computers.</p> <h2 id="introduction-to-vqe">Introduction to VQE</h2> <p>The Variational Quantum Eigensolver is a hybrid quantum-classical algorithm that aims to find the ground state energy of a molecule. The algorithm consists of two main components:</p> <ol> <li>A parameterized quantum circuit (ansatz) that prepares the trial wave function of the molecule.</li> <li>A classical optimizer that varies the parameters of the ansatz to minimize the energy of the molecule.</li> </ol> <p>The VQE algorithm iteratively optimizes the parameters of the ansatz until it converges to the ground state energy of the molecule.</p> <h2 id="simulating-h2-molecule">Simulating H2 Molecule</h2> <p>Let’s start by simulating a simple molecule, H2, using the VQE algorithm. We will use the STO-3G basis set and the PySCF driver to perform the Hartree-Fock calculation. The Hartree-Fock method is a classical approximation that provides a good starting point for the VQE algorithm.</p> <p>First, we define the molecule and run the Hartree-Fock calculation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qiskit_nature.drivers</span> <span class="kn">import</span> <span class="n">PySCFDriver</span>

<span class="n">molecule</span> <span class="o">=</span> <span class="sh">"</span><span class="s">H .0 .0 .0; H .0 .0 0.739</span><span class="sh">"</span>
<span class="n">driver</span> <span class="o">=</span> <span class="nc">PySCFDriver</span><span class="p">(</span><span class="n">atom</span><span class="o">=</span><span class="n">molecule</span><span class="p">)</span>
<span class="n">qmolecule</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div> <p>Next, we analyze the properties of the molecule:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n_el</span> <span class="o">=</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">num_alpha</span> <span class="o">+</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">num_beta</span>
<span class="n">n_mo</span> <span class="o">=</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">num_molecular_orbitals</span>
<span class="n">n_so</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">num_molecular_orbitals</span>
<span class="n">n_q</span> <span class="o">=</span> <span class="n">n_so</span>
<span class="n">e_nn</span> <span class="o">=</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">nuclear_repulsion_energy</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Number of electrons: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">n_el</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Number of molecular orbitals: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">n_mo</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Number of spin-orbitals: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">n_so</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Number of qubits: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">n_q</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Nuclear repulsion energy: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">e_nn</span><span class="p">))</span>
</code></pre></div></div> <p>For the H2 molecule, we have 2 electrons, 2 molecular orbitals, 4 spin-orbitals, and 4 qubits. The nuclear repulsion energy is 0.7160720039512857 Hartree.</p> <p>Now, we can set up the VQE algorithm. We choose the <code class="language-plaintext highlighter-rouge">TwoLocal</code> ansatz with linear entanglement, a single repetition, and final rotation layer. We use the COBYLA optimizer to minimize the energy.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qiskit.circuit.library</span> <span class="kn">import</span> <span class="n">TwoLocal</span>
<span class="kn">from</span> <span class="n">qiskit_nature.circuit.library</span> <span class="kn">import</span> <span class="n">HartreeFock</span>
<span class="kn">from</span> <span class="n">qiskit_nature.mappers.second_quantization</span> <span class="kn">import</span> <span class="n">JordanWignerMapper</span>
<span class="kn">from</span> <span class="n">qiskit_nature.converters.second_quantization</span> <span class="kn">import</span> <span class="n">QubitConverter</span>

<span class="n">num_particles</span> <span class="o">=</span> <span class="p">(</span><span class="n">qmolecule</span><span class="p">.</span><span class="n">num_alpha</span><span class="p">,</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">num_beta</span><span class="p">)</span>
<span class="n">num_spin_orbitals</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">qmolecule</span><span class="p">.</span><span class="n">num_molecular_orbitals</span>

<span class="n">init_state</span> <span class="o">=</span> <span class="nc">HartreeFock</span><span class="p">(</span><span class="n">num_spin_orbitals</span><span class="p">,</span> <span class="n">num_particles</span><span class="p">,</span> <span class="nc">QubitConverter</span><span class="p">(</span><span class="nc">JordanWignerMapper</span><span class="p">()))</span>

<span class="n">ansatz</span> <span class="o">=</span> <span class="nc">TwoLocal</span><span class="p">(</span><span class="n">num_spin_orbitals</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">ry</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">cx</span><span class="sh">'</span><span class="p">,</span> <span class="n">reps</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">entanglement</span><span class="o">=</span><span class="sh">'</span><span class="s">linear</span><span class="sh">'</span><span class="p">,</span> <span class="n">skip_final_rotation_layer</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ansatz</span><span class="p">.</span><span class="nf">compose</span><span class="p">(</span><span class="n">init_state</span><span class="p">,</span> <span class="n">front</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">qiskit.algorithms.optimizers</span> <span class="kn">import</span> <span class="n">COBYLA</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="nc">COBYLA</span><span class="p">(</span><span class="n">maxiter</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
</code></pre></div></div> <p>Finally, we run the VQE algorithm and compare the results with the exact energy obtained from diagonalization:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qiskit.algorithms</span> <span class="kn">import</span> <span class="n">VQE</span>

<span class="n">backend</span> <span class="o">=</span> <span class="n">Aer</span><span class="p">.</span><span class="nf">get_backend</span><span class="p">(</span><span class="sh">'</span><span class="s">statevector_simulator</span><span class="sh">'</span><span class="p">)</span>
<span class="n">initial_point</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">]</span> <span class="o">*</span> <span class="n">ansatz</span><span class="p">.</span><span class="n">num_parameters</span>

<span class="n">vqe</span> <span class="o">=</span> <span class="nc">VQE</span><span class="p">(</span><span class="n">ansatz</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">quantum_instance</span><span class="o">=</span><span class="n">backend</span><span class="p">,</span> <span class="n">initial_point</span><span class="o">=</span><span class="n">initial_point</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">vqe</span><span class="p">.</span><span class="nf">compute_minimum_eigenvalue</span><span class="p">(</span><span class="n">qubit_op</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Exact energy: </span><span class="sh">"</span><span class="p">,</span> <span class="n">exact_energy</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">VQE energy: </span><span class="sh">"</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">optimal_value</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error: </span><span class="sh">"</span><span class="p">,</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">optimal_value</span> <span class="o">-</span> <span class="n">exact_energy</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="sh">"</span><span class="s">mHa</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>The VQE algorithm converges to the exact energy within the chemical accuracy (1 kcal/mol ≈ 1.6 mHa). This demonstrates the power of the VQE algorithm in simulating simple molecules.</p> <h2 id="simulating-lih-molecule">Simulating LiH Molecule</h2> <p>Now, let’s move on to a more complex molecule, LiH. We follow the same steps as before, but this time we use the <code class="language-plaintext highlighter-rouge">FreezeCoreTransformer</code> to reduce the number of qubits required for the simulation. The <code class="language-plaintext highlighter-rouge">FreezeCoreTransformer</code> eliminates the core orbitals that do not contribute significantly to the chemical bonding.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qiskit_nature.problems.second_quantization.electronic</span> <span class="kn">import</span> <span class="n">ElectronicStructureProblem</span>
<span class="kn">from</span> <span class="n">qiskit_nature.transformers</span> <span class="kn">import</span> <span class="n">FreezeCoreTransformer</span>

<span class="n">molecule</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Li 0.0 0.0 0.0; H 0.0 0.0 1.5474</span><span class="sh">'</span>
<span class="n">driver</span> <span class="o">=</span> <span class="nc">PySCFDriver</span><span class="p">(</span><span class="n">atom</span><span class="o">=</span><span class="n">molecule</span><span class="p">)</span>

<span class="n">freezeCoreTransformer</span> <span class="o">=</span> <span class="nc">FreezeCoreTransformer</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">problem</span> <span class="o">=</span> <span class="nc">ElectronicStructureProblem</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="n">q_molecule_transformers</span><span class="o">=</span><span class="p">[</span><span class="n">freezeCoreTransformer</span><span class="p">])</span>
</code></pre></div></div> <p>We also use the <code class="language-plaintext highlighter-rouge">ParityMapper</code> with <code class="language-plaintext highlighter-rouge">two_qubit_reduction=True</code> to further reduce the number of qubits. This mapping takes advantage of the symmetries in the Hamiltonian to eliminate qubits.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qiskit_nature.mappers.second_quantization</span> <span class="kn">import</span> <span class="n">ParityMapper</span>

<span class="n">mapper</span> <span class="o">=</span> <span class="nc">ParityMapper</span><span class="p">()</span>
<span class="n">converter</span> <span class="o">=</span> <span class="nc">QubitConverter</span><span class="p">(</span><span class="n">mapper</span><span class="o">=</span><span class="n">mapper</span><span class="p">,</span> <span class="n">two_qubit_reduction</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">num_particles</span> <span class="o">=</span> <span class="p">(</span><span class="n">problem</span><span class="p">.</span><span class="n">molecule_data_transformed</span><span class="p">.</span><span class="n">num_alpha</span><span class="p">,</span> <span class="n">problem</span><span class="p">.</span><span class="n">molecule_data_transformed</span><span class="p">.</span><span class="n">num_beta</span><span class="p">)</span>
<span class="n">qubit_op</span> <span class="o">=</span> <span class="n">converter</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">main_op</span><span class="p">,</span> <span class="n">num_particles</span><span class="o">=</span><span class="n">num_particles</span><span class="p">)</span>
</code></pre></div></div> <p>For the LiH molecule, we end up with 4 qubits after applying the <code class="language-plaintext highlighter-rouge">FreezeCoreTransformer</code> and <code class="language-plaintext highlighter-rouge">ParityMapper</code>. We use a custom ansatz with linear entanglement and two layers of rotation gates.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_qubits</span> <span class="o">=</span> <span class="n">qubit_op</span><span class="p">.</span><span class="n">num_qubits</span>
<span class="n">qc</span> <span class="o">=</span> <span class="nc">QuantumCircuit</span><span class="p">(</span><span class="n">num_qubits</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_qubits</span><span class="p">):</span>
    <span class="n">qc</span><span class="p">.</span><span class="nf">ry</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">ry</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">_1</span><span class="sh">'</span><span class="p">),</span> <span class="n">i</span><span class="p">)</span>

<span class="n">qc</span><span class="p">.</span><span class="nf">cx</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">qc</span><span class="p">.</span><span class="nf">cx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">qc</span><span class="p">.</span><span class="nf">cx</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_qubits</span><span class="p">):</span>
    <span class="n">qc</span><span class="p">.</span><span class="nf">ry</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">ry</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">_2</span><span class="sh">'</span><span class="p">),</span> <span class="n">i</span><span class="p">)</span>

<span class="n">ansatz</span> <span class="o">=</span> <span class="n">qc</span>
<span class="n">ansatz</span><span class="p">.</span><span class="nf">compose</span><span class="p">(</span><span class="n">init_state</span><span class="p">,</span> <span class="n">front</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p>We run the VQE algorithm with the SLSQP optimizer and compare the results with the exact energy:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimizer</span> <span class="o">=</span> <span class="nc">SLSQP</span><span class="p">(</span><span class="n">maxiter</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>

<span class="n">vqe</span> <span class="o">=</span> <span class="nc">VQE</span><span class="p">(</span><span class="n">ansatz</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">quantum_instance</span><span class="o">=</span><span class="n">backend</span><span class="p">,</span> <span class="n">initial_point</span><span class="o">=</span><span class="p">[</span><span class="mf">0.01</span><span class="p">]</span> <span class="o">*</span> <span class="n">ansatz</span><span class="p">.</span><span class="n">num_parameters</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">vqe</span><span class="p">.</span><span class="nf">compute_minimum_eigenvalue</span><span class="p">(</span><span class="n">qubit_op</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Exact energy: </span><span class="sh">"</span><span class="p">,</span> <span class="n">exact_energy</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">VQE energy: </span><span class="sh">"</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">optimal_value</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error: </span><span class="sh">"</span><span class="p">,</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">optimal_value</span> <span class="o">-</span> <span class="n">exact_energy</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="sh">"</span><span class="s">mHa</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>The VQE algorithm converges to the exact energy within the chemical accuracy, demonstrating its effectiveness in simulating more complex molecules.</p> <h2 id="conclusion">Conclusion</h2> <p>In this article, we explored the Variational Quantum Eigensolver algorithm and its application in simulating molecules using quantum computers. We demonstrated how to simulate the H2 and LiH molecules using the VQE algorithm and compared the results with the exact energies obtained from diagonalization.</p> <p>The VQE algorithm is a promising approach for simulating molecules on near-term quantum computers. By leveraging the power of quantum computers and classical optimizers, the VQE algorithm can provide accurate results for complex molecules that are intractable for classical computers.</p> <p>As quantum hardware and algorithms continue to improve, we can expect the VQE algorithm to become a valuable tool for drug discovery, materials science, and many other fields that rely on accurate molecular simulations.</p>]]></content><author><name></name></author><category term="Quantum-Computing"/><category term="physics"/><category term="programming"/><category term="code"/><summary type="html"><![CDATA[Variational Quantum Eigensolver for Simulating Molecules]]></summary></entry></feed>